/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOrganizationMemberArgs } from "./CreateOrganizationMemberArgs";
import { UpdateOrganizationMemberArgs } from "./UpdateOrganizationMemberArgs";
import { DeleteOrganizationMemberArgs } from "./DeleteOrganizationMemberArgs";
import { OrganizationMemberCountArgs } from "./OrganizationMemberCountArgs";
import { OrganizationMemberFindManyArgs } from "./OrganizationMemberFindManyArgs";
import { OrganizationMemberFindUniqueArgs } from "./OrganizationMemberFindUniqueArgs";
import { OrganizationMember } from "./OrganizationMember";
import { Organization } from "../../organization/base/Organization";
import { Role } from "../../role/base/Role";
import { OrganizationMemberService } from "../organizationMember.service";
@graphql.Resolver(() => OrganizationMember)
export class OrganizationMemberResolverBase {
  constructor(protected readonly service: OrganizationMemberService) {}

  async _organizationMembersMeta(
    @graphql.Args() args: OrganizationMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrganizationMember])
  async organizationMembers(
    @graphql.Args() args: OrganizationMemberFindManyArgs
  ): Promise<OrganizationMember[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OrganizationMember, { nullable: true })
  async organizationMember(
    @graphql.Args() args: OrganizationMemberFindUniqueArgs
  ): Promise<OrganizationMember | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrganizationMember)
  async createOrganizationMember(
    @graphql.Args() args: CreateOrganizationMemberArgs
  ): Promise<OrganizationMember> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        organizationId: args.data.organizationId
          ? {
              connect: args.data.organizationId,
            }
          : undefined,

        roleId: args.data.roleId
          ? {
              connect: args.data.roleId,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrganizationMember)
  async updateOrganizationMember(
    @graphql.Args() args: UpdateOrganizationMemberArgs
  ): Promise<OrganizationMember | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          organizationId: args.data.organizationId
            ? {
                connect: args.data.organizationId,
              }
            : undefined,

          roleId: args.data.roleId
            ? {
                connect: args.data.roleId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationMember)
  async deleteOrganizationMember(
    @graphql.Args() args: DeleteOrganizationMemberArgs
  ): Promise<OrganizationMember | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organizationId",
  })
  async resolveFieldOrganizationId(
    @graphql.Parent() parent: OrganizationMember
  ): Promise<Organization | null> {
    const result = await this.service.getOrganizationId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "roleId",
  })
  async resolveFieldRoleId(
    @graphql.Parent() parent: OrganizationMember
  ): Promise<Role | null> {
    const result = await this.service.getRoleId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
